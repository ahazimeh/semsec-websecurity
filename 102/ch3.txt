owasp authentication cheat sheet
  secure password policies
  2fa/mfa implementation
  password hashing
  Accout Lockout Policies (as facebook sending message to verify when opening from new location, they may lock your account)
  rate limiting
  captcha(after some tries for password I can ask him for captcha to protect against brutforce)

OAuth, OpenID

Set-Cookie header

http only
secure (only send the cookie when having https domain)
same site
domain (.domain) // will send the cookie to all subdomains // domain sends the cookie cross site (it care about be url)
path (only send the cookie when going to certain path)
expire/age


same site
  if I click on a button from outside of a site to go to certain site the cookie should not be used
    (it compares protocol, domain, and TLD(top level domain) )
      // subdomain are ignored so it is same site
      // also for port

We have multiple ways to visit a website
  Top-Level-Navigation
  Embeded Content
  XHR, Fetch API

Top-Level-Navigation (from same site we can call it (first party))
  changing a website url by clicking a button and navigating
  changing the url manually
  html redirection (a and href)
  js redirection
  html form
Embeded Content (view other website content)
  image, iframe
XHR, Fetch API

same site: (strict, lax, none)
  it is going to be sent whether it is same site, cross site...
  when it is strict if I come from a different website I will not be able to send the cookies
  lax will send the cookie when navigating through (top level navigation, and the request type is get)

some browsers as chrome don't allow same site none without adding secure property

putting same site lax could protect me against all csrf attacks except for get requests

IDOR: check for cookies // same for xss and sql injections (send xss url encode)

privilege escalation: depend on the frontend for the role
token: try updating attributes in jwt

tokens are more flexible than cookies: I can use the same token on several servers
attacking

token based authorization:
  common token attacks
  jwt attacks

Common Token Attacks
  Token Leakage
  Brute Force Attacks
  Privilege Escalation
  Token Expiration

Access tokens can be leaked to unauthorized parties. The leaking of access tokens can occur through various names, such as:
  Vulnerable Endpoints (such as we test endpoint that generates the tokens)
  code repositories/source code (someone forgot token in code)
  insecure transmission channel

*******
Vulnerable Endpoints (test putting wrong password, bruteforce if no rate limit is there then I can report, remove password parameter)
  yousef sammouda replaced page id by userid and got token for that user
so the endPoint should take pageId and he tried userId

if I got the password, let us try to bypass 2fa:
  I may get back with login before entering 2fa
if token is being sent to another site that should receive it
access token in js file
look for keys in the source code: apikey, secret key, brearerToken...
check strings for apis
look for automated tools that can help you
look for github project

for facebook: facebook developer exporer tool
  graph api explorer
look for videos, explanations
https://ahmadmansourr.medium.com/how-i-was-able-to-hack-a-company-via-watching-a-youtube-video-without-any-technical-pentesting-4941753a150a
