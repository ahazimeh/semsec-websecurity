Sources: (Any js attribute or function that takes user input from anyplace on the page is considered a source function)
  document.URL
  location.search
  document.cookie
  document.referrer

Sinks: (A potentially harmful JavaScript function. A function is considered a sink if it outputs input to the screen without performing any security checks)
  element.innerHTML
  document.write()
  document.writeln()
  element.insertAdjacentHTML

Dom based vs reflected
the vulnerability is a DOM based xss if it is being injected into the dom through the innerHTML property of the message element.
dom (when I have direct modification to the dom)
reflected: when I get back http response that is reflected to the user's browser, it doesn't modify the dom

<img src="asdasd" onerror="alert(1)"/> // you can use onload if you can't cause alert to make error

sanitize: encodeURI(message).replace(/%20/g, ' ')

1337 (leet) // leetspeek
getSearchParamClean

mitigations:
  Input Validation & Output Encoding
  Use of Libraries and Frameworks (React, Angular)
  Content Security Policy (CSP)
  Http-Only and Secure Cookies
  Web Application Firewall (WAF) // level of infrastructure

Input Validation:
  Length Restrictions
  Types and Format Checking
  Character Filtering
  Whitelisting
  Content-Specific Validation
Output Encoding // html encoding

*Filter evasion:
// in case a website is removing script tags
<script> -> <src<script>ipt>
// closed tags are automatically closed
// so if anything between <> is removed then I can do: <img src=xxx onerror=prompt(1)

use html number: &#40; for ( // don't work
<svg><script>alert&#40;1)</script> // this works because svg is built on xml which can translate it

--> // if -> is replaced with _
  I can do --!> // because when html see ! he will switch to comment bang state // because of html standards

*Content Security Policy (CSP)
who can this website talks to
  csp directives
    default-src
    script-src
    style-src
    img-src
    media-src
    report-uri
    frame-src
  csp sources:
    *
    self
    data
    none
    unsafe-eval
    unsafe-inline
Content-Security-Policy: default-src 'self' example.com *.example.com // allow anything taking src attribute to talk to self, example.com website or any sub-domain for it
default-src 'self'; img-src *; media-src example.org example.net; script-src userscripts.example.com

Content-Security-Policy: script-src 'self' https://example.com https: data;
This CSP directive allows JavaScript to be loaded and executed from the following sources:
  The same origin as the web page ("self"), https://example.com, any https, inline script and resources with "data:" schema ("data:")
    https: (so any https website can be used)
    data (<script src="data:text/javascript,alert(document.domain)"></script>) // I can't write js code but can't from outside
    unsafe-inline (allows me to write inline code but not use a script from outside)
      // read more on data and unsafe-inline
